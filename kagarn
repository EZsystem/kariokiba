'-------------------------------------
' Module: xlmod_MidFormData_Processing
' 説明  : 中間整形シートのデータ読み込み～変換～出力～含有量分解処理を行う
' 作成日: 2025/05/22
' 更新日: -
'-------------------------------------
Option Explicit   ' ●3-2 Option宣言:contentReference[oaicite:0]{index=0}

'=================================================
' サブルーチン名 : Process_MidFormData
' 説明   : 中間整形シートのデータを配列に読み取り、
'          タイトル修正・結合・出力・含有量分解を実行する
' 引数   : なし
' 戻り値 : なし
'=================================================
Public Sub Process_MidFormData()
    ' --- 1. 初期化・変数宣言 ---
    Dim arrData      As Variant
    Dim arrMapping   As Variant
    Dim arrTranspose As Variant
    Dim outputRange  As Range

    ' --- 2. データ読み込み ---
    arrData = LoadData_MidForm()

    ' --- 3. 正誤表読み込み ---
    arrMapping = LoadCorrectionTable()

    ' --- 4. タイトル修正・チェック ---
    ApplyTitleCorrection arrData, arrMapping

    ' --- 5. 転置データ読み込み ---
    arrTranspose = LoadAndTransposeArr2()

    ' --- 6. 配列結合処理 ---
    MergeArr2IntoArr1 arrData, arrTranspose

    ' --- 7. 出力処理（出力範囲を取得） ---
    Set outputRange = ExportMatchingColumns(arrData)

    ' --- 8. 含有量分解処理（貼り付け範囲のみ） ---
    ConvertContentRangeToMinMax outputRange

    ' --- 9. 完了メッセージ ---
    MsgBox "中間整形シートのデータ変換処理が完了しました", vbInformation
End Sub        ' ← Subの終わり

'=================================================
' 関数名 : ExportMatchingColumns
' 説明   : arrDataのタイトルとシート10行目の見出しが一致する列を出力し、
'          出力範囲を返す
' 引数   : arrData（ByRef, Variant）   処理対象配列
' 戻り値 : Range                      出力セルの範囲
'=================================================
Public Function ExportMatchingColumns(ByRef arrData As Variant) As Range
    ' --- 変数宣言ブロック ●3-3:contentReference[oaicite:1]{index=1} ---
    Dim ws          As Worksheet
    Dim headerRange As Range
    Dim matchCols   As New Collection
    Dim arrOut()    As Variant
    Dim i           As Long, j As Long
    Dim title       As String
    Dim cell        As Range
    Dim outCol      As Long
    Dim startRow    As Long
    Dim colOutput   As Range
    Dim rngOutput   As Range

    ' --- 初期化 ---
    Set ws = ThisWorkbook.Sheets("中間整形シート")
    Set headerRange = ws.Range("O10:U10")

    ' --- タイトル一致列抽出 ---
    For j = LBound(arrData, 2) To UBound(arrData, 2)
        title = Trim(CStr(arrData(1, j)))
        For Each cell In headerRange
            If Trim(CStr(cell.Value)) = title Then
                matchCols.Add Array(j, cell.Column)
                Exit For
            End If
        Next cell
    Next j

    If matchCols.Count = 0 Then
        MsgBox "一致する列が見つかりません", vbExclamation
        Exit Function
    End If

    ' --- 出力配列作成 ---
    ReDim arrOut(1 To UBound(arrData, 1) - 1, 1 To matchCols.Count)
    For i = 2 To UBound(arrData, 1)
        For j = 1 To matchCols.Count
            arrOut(i - 1, j) = arrData(i, matchCols(j)(0))
        Next j
    Next i

    ' --- 配列出力＆範囲収集（出力→Unionで範囲をまとめる） ---
    For j = 1 To matchCols.Count
        outCol = matchCols(j)(1)
        startRow = ws.Cells(ws.Rows.Count, outCol).End(xlUp).Row + 1
        If startRow < 11 Then startRow = 11

        ' 書式設定
        Set colOutput = ws.Cells(startRow, outCol).Resize(UBound(arrOut, 1), 1)
        colOutput.NumberFormat = "@"
        colOutput.Value = Application.Index(arrOut, 0, j)

        ' 範囲を統合
        If rngOutput Is Nothing Then
            Set rngOutput = colOutput
        Else
            Set rngOutput = Union(rngOutput, colOutput)
        End If
    Next j

    ' --- 結果返却 ---
    Set ExportMatchingColumns = rngOutput
End Function        ' ← Functionの終わり

'=================================================
' サブルーチン名 : ConvertContentRangeToMinMax
' 説明   : 指定された含有量セル範囲を最小値・最大値に分解して
'          同一行のV列・W列に出力する
' 引数   : rng（ByVal, Range）   処理対象範囲
' 戻り値 : なし
'=================================================
Public Sub ConvertContentRangeToMinMax(ByVal rng As Range)
    ' --- 変数宣言 ---
    Dim ws       As Worksheet
    Dim wsMap    As Worksheet
    Dim mapDict  As Object
    Dim key      As Variant
    Dim cell     As Range
    Dim original As String
    Dim splitVals() As String
    Dim minVal   As String, maxVal As String
    Dim rowIdx   As Long

    ' --- 準備 ---
    Set ws = rng.Worksheet
    Set wsMap = ThisWorkbook.Sheets("含有量_区切り記号表")
    Set mapDict = CreateObject("Scripting.Dictionary")

    ' --- 区切り記号正規化辞書読み込み ---
    rowIdx = 2
    Do While wsMap.Cells(rowIdx, 1).Value <> ""
        If wsMap.Cells(rowIdx, 2).Value <> "" Then
            mapDict(Trim(wsMap.Cells(rowIdx, 1).Value)) = _
                Trim(wsMap.Cells(rowIdx, 2).Value)
        End If
        rowIdx = rowIdx + 1
    Loop

    ' --- 含有量分解処理（渡された範囲だけ） ---
    For Each cell In rng
        original = Trim(Replace(cell.Value, "　", "")) ' 全角スペース除去
        ' 正規化
        For Each key In mapDict.Keys
            original = Replace(original, key, mapDict(key))
        Next key

        ' 分割
        If InStr(original, "-") > 0 Then
            splitVals = Split(original, "-")
            If UBound(splitVals) = 1 Then
                minVal = CleanNumericText(splitVals(0))
                maxVal = CleanNumericText(splitVals(1))
            Else
                minVal = "": maxVal = ""
            End If
        Else
            minVal = CleanNumericText(original)
            maxVal = minVal
        End If

        ' 出力
        rowIdx = cell.Row
        ws.Cells(rowIdx, "V").Value = minVal
        ws.Cells(rowIdx, "W").Value = maxVal
    Next cell

    ' --- 完了メッセージ ---
    'MsgBox "含有量を最小・最大に分解して出力しました", vbInformation
End Sub        ' ← Subの終わり

'============================================
' 関数：CleanNumericText
' 説明：文字列中の最初の数値を取り出す（左右の記号を除去）
'============================================
Private Function CleanNumericText(ByVal s As String) As String
    Dim re As Object
    Set re = CreateObject("VBScript.RegExp")
    re.Pattern = "\d+(\.\d+)?"
    re.Global = False

    If re.Test(s) Then
        CleanNumericText = re.Execute(s)(0).Value
    Else
        CleanNumericText = ""
    End If
End Function    ' ← Functionの終わり


'=================================================
' 関数名 : LoadData_MidForm
' 説明   : 中間整形シートのデータを2次元配列に読み込む
' 引数   : なし
' 戻り値 : Variant型2次元配列（B10:M最終行）
'=================================================
Public Function LoadData_MidForm() As Variant
    Dim ws      As Worksheet
    Dim lastRow As Long
    Dim rng     As Range
    Dim result  As Variant

    ' --- 初期化 ---
    Set ws = ThisWorkbook.Sheets("中間整形シート")
    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row
    Set rng = ws.Range("B10:M" & lastRow)

    ' --- 値取得 ---
    result = rng.Value

    ' --- 結果返却 ---
    LoadData_MidForm = result
End Function        ' ← 関数の終わり

'=================================================
' 関数名 : LoadCorrectionTable
' 説明   : 入力_正誤表シートから修正ルールを読み込む
' 引数   : なし
' 戻り値 : Variant型2次元配列（B7:D最終行）
'=================================================
Public Function LoadCorrectionTable() As Variant
    Dim ws      As Worksheet
    Dim lastRow As Long
    Dim rng     As Range
    Dim result  As Variant

    ' --- 初期化 ---
    Set ws = ThisWorkbook.Sheets("入力_正誤表")
    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row
    Set rng = ws.Range("B7:D" & lastRow)

    ' --- 値取得 ---
    result = rng.Value

    ' --- 結果返却 ---
    LoadCorrectionTable = result
End Function        ' ← 関数の終わり

'=================================================
' サブルーチン名 : ApplyTitleCorrection
' 説明   : arrDataのタイトル行を正誤表のルールで修正し、
'          未変換および既変換タイトルをデバッグ出力する
' 引数   : arrData（ByRef, Variant）   処理対象配列
'         : arrMapping（ByVal, Variant）正誤表配列
' 戻り値 : なし
'=================================================
Public Sub ApplyTitleCorrection(ByRef arrData As Variant, ByVal arrMapping As Variant)
    Dim colIndex     As Long
    Dim ruleRow      As Long
    Dim beforeVal    As String
    Dim afterVal     As String
    Dim currentTitle As String
    Dim isConverted  As Boolean
    Dim notMatched   As New Collection
    Dim preConverted As New Collection
    Dim msg          As String
    Dim hasError     As Boolean
    Dim item         As Variant

    ' --- タイトル変換処理 ---
    For colIndex = LBound(arrData, 2) To UBound(arrData, 2)
        currentTitle = Trim(CStr(arrData(1, colIndex)))
        isConverted = False

        ' --- 変換ルール適用 ---
        For ruleRow = LBound(arrMapping, 1) To UBound(arrMapping, 1)
            beforeVal = Trim(CStr(arrMapping(ruleRow, 2))) ' 変換前
            afterVal = Trim(CStr(arrMapping(ruleRow, 3)))  ' 変換後

            If currentTitle = beforeVal Then
                arrData(1, colIndex) = afterVal
                isConverted = True
                Exit For
            ElseIf currentTitle = afterVal Then
                On Error Resume Next
                preConverted.Add currentTitle, currentTitle
                On Error GoTo 0
                isConverted = True
                Exit For
            End If
        Next ruleRow

        If Not isConverted And currentTitle <> "" Then
            On Error Resume Next
            notMatched.Add currentTitle, currentTitle
            On Error GoTo 0
        End If
    Next colIndex

    ' --- ログ出力 ---
    hasError = False
    msg = ""
    If notMatched.Count > 0 Then
        hasError = True
        msg = msg & "◆未変換タイトル：" & vbCrLf
        For Each item In notMatched
            msg = msg & "・" & item & vbCrLf
        Next
    End If
    If preConverted.Count > 0 Then
        hasError = True
        msg = msg & vbCrLf & "◆既変換タイトル：" & vbCrLf
        For Each item In preConverted
            msg = msg & "・" & item & vbCrLf
        Next
    End If
    If hasError Then
        Debug.Print "【ApplyTitleCorrection ログ】"
        Debug.Print msg
    End If
End Sub        ' ← Subの終わり

'=================================================
' 関数名 : LoadAndTransposeArr2
' 説明   : 中間整形シートのB3:C6の値を転置して返却する
' 引数   : なし
' 戻り値 : Variant型2次元配列（転置後）
'=================================================
Public Function LoadAndTransposeArr2() As Variant
    Dim ws       As Worksheet
    Dim rawData  As Variant
    Dim result() As Variant
    Dim r        As Long, c As Long

    ' --- 初期化 ---
    Set ws = ThisWorkbook.Sheets("中間整形シート")
    rawData = ws.Range("B3:C6").Value

    ' --- 転置処理 ---
    ReDim result(1 To UBound(rawData, 2), 1 To UBound(rawData, 1))
    For r = 1 To UBound(rawData, 1)
        For c = 1 To UBound(rawData, 2)
            result(c, r) = rawData(r, c)
        Next c
    Next

    ' --- 結果返却 ---
    LoadAndTransposeArr2 = result
End Function        ' ← 関数の終わり

'=================================================
' サブルーチン名 : MergeArr2IntoArr1
' 説明   : arrTransposeのタイトルに一致する列をarrDataに結合する
' 引数   : arrData（ByRef, Variant）       処理対象配列
'         : arrTranspose（ByVal, Variant） 転置配列
' 戻り値 : なし
'=================================================
Public Sub MergeArr2IntoArr1(ByRef arrData As Variant, ByVal arrTranspose As Variant)
    Dim j          As Long
    Dim colIndex   As Long
    Dim titleToFind As String
    Dim matchIndex As Long
    Dim r          As Long

    ' --- マージ処理 ---
    For j = LBound(arrTranspose, 2) To UBound(arrTranspose, 2)
        titleToFind = Trim(CStr(arrTranspose(1, j)))
        matchIndex = -1

        ' --- 配列タイトル検索 ---
        For colIndex = LBound(arrData, 2) To UBound(arrData, 2)
            If Trim(CStr(arrData(1, colIndex))) = titleToFind Then
                matchIndex = colIndex
                Exit For
            End If
        Next

        ' --- 結合実行 ---
        If matchIndex > 0 Then
            For r = 2 To UBound(arrData, 1)
                arrData(r, matchIndex) = arrTranspose(2, j)
            Next r
        Else
            Debug.Print "【MergeArr2IntoArr1】一致しないタイトル：" & titleToFind
        End If
    Next j
End Sub        ' ← Subの終わり


