'=== [File] xl_clsRangeAccessor.cls ===
'=====================================
' Class Module: xl_clsRangeAccessor
' 説明　：ワークシート範囲と配列間の相互変換および最終行・最終列取得を提供するユーティリティ
' 作成日：2025/04/25
' 更新日：再生成 by そうじろう
'=====================================
Option Explicit

' --- 内部保持変数 ---
'（このクラスでは内部変数はありません）

'=================================================
' 関数名 : RangeToArray
' 引数 : ws - 対象のワークシート
'        rng - 対象のセル範囲
' 戻り値 : セル範囲の2次元配列（Variant）
' 機能 : 指定範囲の値を配列として取得するにゃ
'=================================================
Public Function RangeToArray(ws As Worksheet, rng As Range) As Variant
    RangeToArray = rng.value
End Function

'=================================================
' サブルーチン名 : ArrayToRange
' 引数 : ws - 対象のワークシート
'        targetRng - 書き込み対象のセル範囲
'        data - 2次元配列（Variant）
' 機能 : 配列データを指定範囲に一括で書き込むにゃ
'=================================================
Public Sub ArrayToRange(ws As Worksheet, targetRng As Range, data As Variant)
    targetRng.value = data
End Sub

'=================================================
' 関数名 : GetLastRow
' 引数 : ws - 対象のワークシート
'        col（省略可）- チェックする列番号（既定値 = 1）
' 戻り値 : 最終行番号（Long）
' 機能 : 指定列の最下端までのうち、最終データ行を取得するにゃ
'=================================================
Public Function GetLastRow(ws As Worksheet, Optional col As Variant) As Long
    If IsMissing(col) Then col = 1
    GetLastRow = ws.Cells(ws.Rows.Count, col).End(xlUp).row
End Function

'=================================================
' 関数名 : GetLastColumn
' 引数 : ws - 対象のワークシート
'        row（省略可）- チェックする行番号（既定値 = 1）
' 戻り値 : 最終列番号（Long）
' 機能 : 指定行の右端までのうち、最終データ列を取得するにゃ
'=================================================
Public Function GetLastColumn(ws As Worksheet, Optional row As Variant) As Long
    If IsMissing(row) Then row = 1
    GetLastColumn = ws.Cells(row, ws.Columns.Count).End(xlToLeft).Column
End Function


'=== [File] xl_clsSheetManager.cls ===
'=====================================
' Class Module: xl_clsSheetManager
' 説明　：シートの存在確認、取得、保護解除・保護を提供するユーティリティ
' 作成日：2025/04/25
' 更新日：再生成 by そうじろう
'=====================================
Option Explicit

' --- 内部保持変数 ---
'（このクラスでは内部変数はありません）

'=================================================
' 関数名 : SheetExists
' 引数 : wb - 対象の Workbook  
'        sheetName - チェック対象のシート名  
' 戻り値 : シートが存在すれば True
' 機能 : 指定されたシートが Workbook 内に存在するかどうかを判定するにゃ
'=================================================
Public Function SheetExists(wb As Workbook, sheetName As String) As Boolean
    On Error Resume Next
    Dim ws As Worksheet
    Set ws = wb.Worksheets(sheetName)
    SheetExists = (Err.Number = 0)
    On Error GoTo 0
End Function

'=================================================
' 関数名 : GetSheet
' 引数 : wb - 対象の Workbook  
'        sheetName - 対象シート名  
' 戻り値 : Worksheet オブジェクト
' 機能 : 指定されたシートを取得して返すにゃ（存在しない場合はエラーを出すにゃ）
'=================================================
Public Function GetSheet(wb As Workbook, sheetName As String) As Worksheet
    If SheetExists(wb, sheetName) Then
        Set GetSheet = wb.Worksheets(sheetName)
    Else
        Err.Raise vbObjectError + 1000, , "シートが存在しません: " & sheetName
    End If
End Function

'=================================================
' サブルーチン名 : UnprotectSheet
' 引数 : ws - 対象の Worksheet  
'        password（省略可）- 保護解除用パスワード  
' 機能 : 対象シートが保護されている場合に、指定パスワードで保護を解除するにゃ
'=================================================
Public Sub UnprotectSheet(ws As Worksheet, Optional password As String = "")
    If ws.ProtectContents Then ws.Unprotect password
End Sub

'=================================================
' サブルーチン名 : ProtectSheet
' 引数 : ws - 対象の Worksheet  
'        password（省略可）- 保護パスワード  
'        DrawingObjects, Contents, Scenarios（省略可）- 保護対象の項目  
' 機能 : 指定された設定でシートを保護するにゃ（パスワード付き保護も可）
'=================================================
Public Sub ProtectSheet(ws As Worksheet, Optional password As String = "", Optional DrawingObjects As Boolean = True, Optional Contents As Boolean = True, Optional Scenarios As Boolean = True)
    ws.Protect password:=password, DrawingObjects:=DrawingObjects, Contents:=Contents, Scenarios:=Scenarios
End Sub


'=== [File] xl_clsWorkbookManager.cls ===
'gitにはまだアップしていないよ。2025年04月30日(水)8:26
'========================================
' クラス名　　: xl_clsWorkbookManager
' 説明　　　　: Excelファイルを開閉・管理するユーティリティクラス
' 作成日　　　: 2025/04/29
' 作成者　　　: そうじろう（そうちゃん）
'========================================

Option Compare Database
Option Explicit

' --- 内部変数 ---
Private xlApp As Object
Private wb As Workbook

'========================================
' サブルーチン名 : Init
' 引数 : showExcel（省略可）- Excelウィンドウを表示するか（初期値:非表示）
' 機能 : Excel.Application を起動してオブジェクトを保持するにゃ
'========================================
Public Sub Init(Optional showExcel As Boolean = False)
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = showExcel
End Sub

'========================================
' 関数名 : OpenWorkbook
' 引数 : path - ファイルパス
'        ReadOnly（省略可）- 読み取り専用で開くか（Falseで書き込み可）
' 戻り値 : 開かれた Workbook オブジェクト
' 機能 : 指定パスのExcelファイルを開いて返すにゃ
'========================================
Public Function OpenWorkbook(path As String, Optional ReadOnly As Boolean = False) As Workbook
    Set wb = xlApp.Workbooks.Open(fileName:=path, ReadOnly:=ReadOnly)
    Set OpenWorkbook = wb
End Function

'========================================
' プロパティ名 : GetWorkbook
' 戻り値 : 保持している Workbook オブジェクト
' 機能 : 現在開かれているブックオブジェクトを返すにゃ
'========================================
Public Property Get GetWorkbook() As Workbook
    Set GetWorkbook = wb
End Property

'========================================
' 関数名 : GetSheet
' 引数 : identifier - シート名 または インデックス
' 戻り値 : 対象の Worksheet オブジェクト
' 機能 : 指定された名前 or インデックスのシートを取得するにゃ
'========================================
Public Function GetSheet(identifier As Variant) As Object
    If wb Is Nothing Then
        MsgBox "GetSheet にて wb が Nothing にゃ！", vbCritical
        Exit Function
    End If

    If IsNumeric(identifier) Then
        Set GetSheet = wb.Sheets(CLng(identifier))
    Else
        Set GetSheet = wb.Sheets(CStr(identifier))
    End If
End Function

'========================================
' サブルーチン名 : SaveWorkbook
' 機能 : 開いているブックをそのまま保存するにゃ
'========================================
Public Sub SaveWorkbook()
    If Not wb Is Nothing Then wb.Save
End Sub

'========================================
' サブルーチン名 : SaveWorkbookAs
' 引数 : path - 新しく保存するパス
' 機能 : 開いているブックを別名で保存するにゃ
'========================================
Public Sub SaveWorkbookAs(path As String)
    If Not wb Is Nothing Then wb.SaveAs fileName:=path
End Sub

'========================================
' サブルーチン名 : CloseWorkbook
' 引数 : SaveChanges（省略可）- 保存して閉じるかどうか（Falseで保存しない）
' 機能 : 開いているブックを閉じて、Workbook 変数を解放するにゃ
'========================================
Public Sub CloseWorkbook(Optional SaveChanges As Boolean = False)
    If Not wb Is Nothing Then wb.Close SaveChanges:=SaveChanges
    Set wb = Nothing
End Sub

'========================================
' サブルーチン名 : QuitExcel
' 機能 : Excelアプリケーションを終了し、オブジェクトも解放するにゃ
'========================================
Public Sub QuitExcel()
    If Not xlApp Is Nothing Then
        xlApp.Quit
        Set xlApp = Nothing
    End If
End Sub

'========================================
' プロパティ名 : HasExcelApp
' 戻り値 : Excelアプリケーションオブジェクトが有効かどうか
' 機能 : Excel が起動されているかを返すにゃ
'========================================
Public Property Get HasExcelApp() As Boolean
    HasExcelApp = Not xlApp Is Nothing
End Property

'========================================
' プロパティ名 : HasWorkbook
' 戻り値 : Workbook オブジェクトが有効かどうか
' 機能 : ブックが開かれているかを返すにゃ
'========================================
Public Property Get HasWorkbook() As Boolean
    HasWorkbook = Not wb Is Nothing
End Property



